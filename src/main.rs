use anyhow::Result;
use core::str;

use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{prelude::Peripherals, gpio::{PinDriver, Pull}},
};

mod kodi;
mod wifi;

#[toml_cfg::toml_config]
struct Config {
    #[default("guest")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("http://10.1.2.3:8080/jsonrpc")]
    kodi_endpoint: &'static str,
    #[default("Basic dGVzdDpwYXNz")]
    kodi_auth_basic: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // `CONFIG` constant is auto-generated by toml_config
    let kodi_config = CONFIG;

    let _wifi = wifi::wifi(
        kodi_config.wifi_ssid,
        kodi_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    let mut button = PinDriver::input(peripherals.pins.gpio9)?;
    button.set_pull(Pull::Down)?;
    let mut debounce = 0i8;

    loop {
        if button.is_high() {
            debounce = 3;
        } else if debounce > 0 {
            debounce -= 1;
        } else if debounce == 0 {
            debounce -= 1;
            log::info!("toggleing play/pause");
            kodi::play_pause()?;
        }
        std::thread::sleep(std::time::Duration::from_millis(10));
    }
}
